var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"api-v1.html","title":"API","text":"<p><code>b3scale</code> provides an API. While <code>b3scalectl</code> provides a command line wrapper, the underlying API is publicly available based on the OpenAPI specification linked below.</p> <p></p>"},{"location":"sponsors.html","title":"Sponsors","text":""},{"location":"sponsors.html#infrarun","title":"infra.run","text":"<p> infra.run is a Berlin based hosting and services company focussing on the education and non-for-profit sectors. infra.run has sponsored b3scale to create a flexible scaler and loadbalancer for BigBlueButton with a focus of multi tenancy. The goal: provide a scalable, privacy conserving and efficient video call solutation at an affordable price that is second to none. infra.run continously invests in b3scale to improve upon its capabilities and features.</p> <p></p>"},{"location":"sponsors.html#prototype-fund","title":"Prototype Fund","text":"<p>The Prototype Fund is a funding program of the Federal Ministry of Education and Research (BMBF) that is managed and evaluated by the Open Knowledge Foundation Germany.  Individuals and small teams (of freelance coders, hackers, UX designers and more) can receive funding in order to test their ideas and develop open source applications in the areas of Civic Tech, Data Literacy, IT Security and Software Infrastructure. We aim to keep innovation processes as well as infrastructures open and accessible.</p> <p>The Prototype Fund has sponsored the initial development of b3scale.</p>"},{"location":"getting_started/b3scale.html","title":"Setting up the main service","text":""},{"location":"getting_started/b3scale.html#installing-b3scale","title":"Installing b3scale","text":"Debian/UbuntuopenSUSEOther distributionsKubernetes/Docker <p>Starting with version 1.0.3, b3scale provides <code>.deb</code> packages for use in Ubuntu. Download the <code>b3scaled-*.deb</code> asset from the release page on GitHub. On an Intel/AMD 64 Bit system, install the <code>.deb</code> package like this:</p> <pre><code>sudo dpkg -i b3scaled_1.0.3_linux_amd64.deb\n</code></pre> <p>For openSUSE Tumbleweed run the following as root:</p> <pre><code>zypper addrepo https://download.opensuse.org/repositories/home:dmolkentin:infrarun/openSUSE_Tumbleweed/home:dmolkentin:infrarun.repo\nzypper refresh\nzypper install b3scale\n</code></pre> <p>For openSUSE Leap 15.5 run the following as root: <pre><code>zypper addrepo https://download.opensuse.org/repositories/home:dmolkentin:infrarun/15.5/home:dmolkentin:infrarun.repo\nzypper refresh\nzypper install b3scale\n</code></pre></p> <p>Pre-compiled binaries are available from the release page on GitHub. While you can use those binaries, you will need to setup systemd services by yourself. You can find the skeleton files here.</p> <p>Starting with version 1.0.3, we provide an experimental, scratch-based container image, available from the GitHub Container Registry:</p> <pre><code>docker pull ghcr.io/b3scale/b3scaled:1.0.3\n</code></pre>"},{"location":"getting_started/b3scale.html#configuring-the-service","title":"Configuring the service","text":"<p><code>b3scale</code> is configured exclusively through environment variables. This makes it work both in a traditional and cloud-native environment. If you have installed <code>b3scale</code> using packages, you can find the settings in <code>/etc/default/b3scale</code> (Debian/Ubuntu) or <code>/etc/sysconfig/b3scale</code> (OpenSUSE).</p> <p>Define at least <code>B3SCALE_DB_URL</code> and point it to a previously created database on your Postgres server:</p> <pre><code>B3SCALE_DB_URL=\"postgres://b3scale:secretpassword@localhost:5432/b3scale\"\n</code></pre> <p>The next important variable is <code>B3SCALE_API_JWT_SECRET</code>. It is required as seed for generating JWTs, which control the access of API clients.</p> <pre><code>B3SCALE_API_JWT_SECRET=\"a_string_of_random_caracters\"\n</code></pre> <p>you can create a safe secret using the <code>pwgen</code> tool:</p> <pre><code>pwgen -snc 42 1\n</code></pre> <p>Leave the remaining options as they are. We will cover them in a later chapter. A simple Postgres database can be created like so:</p> <pre><code>sudo -u postgres psql\npostgres=# create database b3scale;\npostgres=# create user myuser with encrypted password 'secretpassword';\npostgres=# grant all privileges on database b3scale to b3scale;\n</code></pre> <p>Finally, start the service:</p> <pre><code>systemctl start b3scale\n</code></pre>"},{"location":"getting_started/b3scale.html#tls-termination","title":"TLS termination","text":"<p>By default, b3scale binds to port <code>42352</code> on <code>localhost</code>. Use a reverse-proxy capable web server for TLS termination.</p>"},{"location":"getting_started/b3scale.html#nginx","title":"nginx","text":"<p>To use nginx as a frontend proxy and TLS termination, adjust and use the following snippet:</p> <pre><code>server {\nlisten 443 ssl http2;\nlisten [::]:443 ssl http2;\nserver_name api.bbb.example.org;\n# From the conservative settings on https://ssl-config.mozilla.org/\nssl_protocols               TLSv1.2 TLSv1.3;\nssl_ciphers                 ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\nssl_prefer_server_ciphers   off;\nssl_certificate             /etc/nginx/certs.d/api.bbb.example.org.pem;\nssl_certificate_key         /etc/nginx/certs.d/api.bbb.example.org.key;\nssl_session_timeout         1d;\nssl_session_cache           shared:MozSSL:10m;\nssl_session_tickets         off;\nssl_stapling                on;\nssl_stapling_verify         on;\n# access_log                /var/log/nginx/access.log;\nerror_log                   /var/log/nginx/error.log;\nadd_header                  Strict-Transport-Security \"max-age=15768000;\" always;\nadd_header                  X-Robots-Tag \"none\" always;\nlocation / {\nproxy_pass          http://127.0.0.1:42352;\nproxy_http_version  1.1;\nproxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header    X-Forwarded-Proto $scheme;\n}\nlocation /metrics {\nproxy_pass          http://127.0.0.1:42352;\nallow               &lt;ipv4_of_prometheus_host&gt;/32;\nallow               &lt;ipv6_of_prometheus_host&gt;/128;\ndeny                all;\nproxy_http_version  1.1;\nproxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header    X-Forwarded-Proto $scheme;\n}\nlocation = / {\nreturn              403;\n}\n}\n</code></pre>"},{"location":"getting_started/b3scale.html#other-load-balancers","title":"Other load balancers","text":"<p>Other load balancers and TLS terminators should just work just the same way. If you would like to contribute documentation, please open an issue.</p>"},{"location":"getting_started/b3scale.html#scale-and-redundancy-of-b3scale","title":"Scale and redundancy of b3scale","text":"<p>While a single instance of <code>b3scaled</code> has worked fine during the Covid 19 pandemic, serving some 100k concurrent users while maintaining more than a hundred backends, and multiple frontends, keeping b3scale redundant seems like a good idea. To do so, it is possible to launch several instances of <code>b3scaled</code>, as its operations are designed to be atomic towards the database.</p> <p>Note</p> <p>Your database and your TLS terminator are also single points of failure. Make sure to make them redundant as well if you aim for systematic redundancy, and make sure they don't become your weakest link if you scale up <code>b3scaled</code>.</p>"},{"location":"getting_started/b3scale.html#bootstrapping-and-migrations","title":"Bootstrapping and migrations","text":"<p>For the next step, you will need the <code>b3scalectl</code> command like utility. Download it from the GitHub release page.</p> <pre><code>b3scalectl --api https://api.bbb.example.org\n</code></pre> <p>Note</p> <p>Set up a convenience alias like this: <pre><code>export b3scalectl_example='b3scalectl --api https://api.bbb.example.org'\n</code></pre></p> <p><code>b3scalectl</code> will now ask for the shared API secret that you provided to <code>b3scaled</code> as <code>B3SCALE_API_JWT_SECRET</code>. It uses this secret to derive a JWT token. The secret itself will not be stored. Next, run <code>b3scalectl --api https://api.bbb.example.org db migrate</code> to apply the initial database structure. b3scale is now operational.</p>"},{"location":"getting_started/b3scaleagent.html","title":"Rolling out the node agent","text":"<p>The b3scale node agent is a critical component that must be installed on every BigBlueButton node that works as a backend within a b3scale cluster. The node agent verifies the health of the BBB node and reports back to b3scale.</p>"},{"location":"getting_started/b3scaleagent.html#installation","title":"Installation","text":"<p>Retrieve the package from the GitHub release page. Install  the <code>.deb</code> package like this:</p> <pre><code>sudo dpkg -i b3scaleagent_1.0.3_linux_amd64.deb\n</code></pre> <p>Make the following changes to <code>/etc/default/b3scaleagent</code>:</p> <pre><code>B3SCALE_API_URL=\"https://api.bbb.example.org\"\nB3SCALE_API_ACCESS_TOKEN=\"&lt;output of authorize_node_agent&gt;\"\nBBB_CONFIG=\"/etc/bigbluebutton/bbb-web.properties\"\n</code></pre> <p><code>B3SCALE_API_URL</code> should point to the root URL of the <code>b3scale</code> load balancer. The other settings should only be changed when needed. They are documented in-line. <code>B3SCALE_API_ACCESS_TOKEN</code> is a JWT generated by the call to b3scalectl. <code>my-api-secret</code> should be what you provided to b3scaled as <code>B3SCALE_API_JWT_SECRET</code> earlier. It will be used to generate an access token. The secret itself will not be stored:</p> <pre><code>b3scalectl --api https://api.bbb.example.org authorize_node_agent --ref node23 --secret my-api-secret\n</code></pre> <p><code>BBB_CONFIG</code> should point to the <code>bbb-web</code> override config at <code>/etc/bigbluebutton/bbb-web.properties</code>. With that, you are ready to start the agent:</p> <pre><code>systemctl start b3scaleagent\n</code></pre> <p>The agent will automatically register the node with b3scale. Continue over at maintenance to learn more about the node setup.</p>"},{"location":"getting_started/k8s_integration.html","title":"Kubernetes Integration","text":"<p>If you are running multiple frontends in Kubernetes, the b3scale Operator allows for provisioning of new Frontends through CRD. This is independent of whether or not you run b3scale in Kubernetes or not.</p>"},{"location":"getting_started/k8s_integration.html#b3scale-operator-for-kubernetes","title":"b3scale operator for Kubernetes","text":"<pre><code>docker pull ghcr.io/b3scale/b3scale-operator:latest\n</code></pre>"},{"location":"getting_started/k8s_integration.html#deployment","title":"Deployment","text":"<p>The Kubernetes Deployment for the b3scale Operator is described in the operators' README.</p>"},{"location":"getting_started/overview.html","title":"Overview","text":"b3scale architecture overview"},{"location":"getting_started/overview.html#concepts","title":"Concepts","text":"<p>BigBlueButton arrives with a simple concept: One API, one frontend, usually Greenlight, authenticated through an API secret. As a scaler and load balancer for BigBlueButton, b3scale expands on that by introducing additional concepts:</p> <ul> <li>Node: An individual installation of BigBlueButton</li> <li>Backend: A BigBlueButton Node made available as a resource to b3scale</li> <li>Frontend: A frontend is used to distinguish multiple tenants. It is a tuple of a frontend name, an instance and JSON-encoded settings valid for that frontend.</li> <li>Tags: Used to associate one or more frontends with one ore more backends (n:m relation)</li> <li>Metrics: b3scale provides Prometheus-compatible metrics about front- and backends</li> <li>JWTs: JSON Web-Tokens are used to authorize services with b3scale </li> </ul>"},{"location":"getting_started/overview.html#components","title":"Components","text":"<p>b3scale consists of several components:</p> <ul> <li>Database: b3scale requires a Postgres-Database as storage backend</li> <li>b3scaled: The central scaling service that accepts requests from frontends and distributes them to backends</li> <li>b3scalectl: The command line tool, a wrapper</li> <li>b3scaleagent:  An agent process that reports status and health of a backend to the central scaling service using a REST API</li> <li>b3scalenoded (deprecated): Like b3scaleagent, but connects directly to the database </li> </ul>"},{"location":"getting_started/recording.html","title":"Setting up recording","text":"<p>b3scale can publish recordings recoded on a node and will allow frontends to manage them in three ways:</p> <ul> <li>Publish a recording</li> <li>Unpublish a recording</li> <li>Delete a recording</li> </ul>"},{"location":"getting_started/recording.html#how-it-works","title":"How it works","text":""},{"location":"getting_started/recording.html#on-the-b3scale-server","title":"On the b3scale server","text":"<p>b3scale expects two directories with full write access to the <code>b3scaled</code> process, passed to the process as environment variables:</p> <ul> <li><code>B3SCALE_RECORDINGS_PUBLISHED_PATH</code> points to a directory where all published talks will be hosted.</li> <li><code>B3SCALE_RECORDINGS_UNPUBLISHED_PATH</code> points to a directory where all unpublished/depublished talks will be hosted</li> </ul> <p>The playback URL will be created using the host provided via the <code>B3SCALE_RECORDINGS_PLAYBACK_HOST</code> variable. The playback HTTPS host needs to be set up separately and requires (read-only) access to <code>B3SCALE_RECORDINGS_PUBLISHED_PATH</code>.</p>"},{"location":"getting_started/recording.html#on-the-bigbluebutton-node","title":"On the BigBlueButton node","text":"<p>Publishing the recordings requires a post-publish hook script to be placed in the <code>in /usr/local/bigbluebutton/core/scripts/post_publish</code>folder on all BBB nodes.</p> <p>Depending on your setup you either need to copy (via rsync or scp) to <code>B3SCALE_RECORDINGS_PUBLISHED_PATH</code> on a node that has access to that location, or mount a shared volume.</p> <p>Finally, the <code>metadata.xml</code> document, created by the BigBlueButton node for the respective recording, needs to be submitted to <code>recording-import</code> API endpoint on b3scale.</p> <p>See <code>examples/post_publish_b3scale_import.rb</code> for a trivial example that assumes that all nodes, the b3scale server and the playback host share the same <code>/var/bigbluebutton</code> directory via a shared filesystem such as NFS or Ceph.</p>"},{"location":"maintenance/backends.html","title":"Backend Lifecycle Management","text":""},{"location":"maintenance/backends.html#adding-a-backend","title":"Adding a backend","text":"<p>A backend is either autoregistered (by passing <code>-a</code> to <code>b3scaleagent</code>), ending up in <code>init</code> state. If autoregistration is disabled, a node can be added manually (see \"Adding a backend\").</p> <pre><code>b3scalectl --api https://api.bbb.example.org add backend https://node23.bbb.example.org\n</code></pre>"},{"location":"maintenance/backends.html#assigning-tags","title":"Assigning tags","text":"<p>You can assign tags to a node to ensure that only certain frontents can access certain backends. This way, you can assign pilot customers to nodes running newer BBB versions or grant certain frontends access to nodes with more resources:</p> <pre><code>b3scalectl --api https://api.bbb.example.org set backend -j '{\"tags\":[\"bbb_26\"]}' https://node23.bbb.example.org\n</code></pre>"},{"location":"maintenance/backends.html#listing-backends","title":"Listing backends","text":"<p>You can get a list of all backends including health parameters:</p> <pre><code>b3scalectl --api https://api.bbb.example.org show backends\n\n65959a9d-0d1d-476b-ad7a-f665feb63d01\n  Host:  https://node22.bbb.example.org/bigbluebutton/api/\n  Settings:  {\"tags\":[\"bbb_25\"]}\nNodeState:     ready    AdminState:    ready\n  MC/AC/R:   0/0/0.00\n  LoadFactor:    1\nLatency:   92.5466361ms\n\n6a2f1953-6db3-4efd-bd35-b7d74c1ddd68\n  Host:  https://node23.bbb.example.org/bigbluebutton/api/\n  Settings:  {\"tags\":[\"bbb_26\"]}\nNodeState:     ready    AdminState:    ready\n  MC/AC/R:   0/0/0.00\n  LoadFactor:    1\nLatency:   93.076423ms\n\n8bf64dca-18bf-4bb4-9159-2a3e52e7e05b\n  Host:  https://node24.bbb.example.org/bigbluebutton/api/\n  Settings:  {\"tags\":[\"bbb_27\"]}\nNodeState:     ready    AdminState:    ready\n  MC/AC/R:   0/0/0.00\n  LoadFactor:    1\nLatency:   91.648361ms\n</code></pre>"},{"location":"maintenance/backends.html#setting-tags","title":"Setting tags","text":"<pre><code>b3scalectl --api https://api.bbb.example.org set frontend -j ' {\"tags\":[\"bbb_28\"]}' https://node22.bbb.example.org/bigbluebutton/api/\n</code></pre>"},{"location":"maintenance/backends.html#abbreviations","title":"Abbreviations","text":"<ul> <li><code>MC</code>: Meeting Count</li> <li><code>AC</code>: Attendee Count</li> <li><code>R</code>: Ratio</li> </ul>"},{"location":"maintenance/backends.html#backend-states","title":"Backend states","text":""},{"location":"maintenance/backends.html#nodestate","title":"NodeState","text":"<ul> <li>init: The node was freshly initialized</li> <li>error: The node has encountered an error condition</li> <li>ready: The node is ready for use</li> <li>stopped: The node has been stopped</li> <li>decommissioned: The node has been decomissioned</li> </ul>"},{"location":"maintenance/backends.html#adminstate","title":"AdminState","text":"<ul> <li>init: The node was freshly initialized</li> <li>ready: The node is has been enabled and is ready for use</li> <li>stopped: The node has been disabled andd is stopped</li> <li>decommissioned: The node has been decomissioned</li> </ul>"},{"location":"maintenance/backends.html#enabling-a-backend","title":"Enabling a backend","text":"<pre><code>b3scalectl --api https://api.bbb.example.org enable backend https://node23.bbb.example.org\n</code></pre>"},{"location":"maintenance/backends.html#cordoning-a-backend","title":"Cordoning a backend","text":"<pre><code>b3scalectl --api https://api.bbb.example.org disable backend https://node23.bbb.example.org\n</code></pre> <p>Note</p> <p>Disabling a backend will keep existing meeting in place and active until the meeting has been finished.</p>"},{"location":"maintenance/backends.html#reintegrating-a-backend","title":"Reintegrating a backend","text":"<p>See section \"Enabling a backend\".</p>"},{"location":"maintenance/backends.html#removing-a-backend","title":"Removing a backend","text":"<pre><code>b3scalectl --api https://api.bbb.example.org delete backend https://node23.bbb.example.org\n</code></pre> <p>If the node has been removed prior to deregistering it with b3scale, you may need to specify the <code>--force</code> parameter to forcefully remove the backend. It is recommended to always decomission backends through a cordoning phase in order to not disrupt running meetings.</p>"},{"location":"maintenance/frontends.html","title":"Frontend Lifecycle Management","text":""},{"location":"maintenance/frontends.html#adding-a-frontend","title":"Adding a frontend","text":"<pre><code>b3scalectl --api https://api.bbb.example.org add frontend --secret \"$(pwgen -s 1 42)\" my-frontend\n</code></pre>"},{"location":"maintenance/frontends.html#assigning-tags-and-properties-to-a-frontend","title":"Assigning tags and properties to a frontend","text":"<pre><code>b3scalectl --api https://api.bbb.example.org set frontend -j '{\"required_tags\":[\"bbb_26\"]}' my-frontend\n</code></pre> <p>You can also specify the <code>-j</code> parameter while adding a frontend with <code>add frontend</code>.</p>"},{"location":"maintenance/frontends.html#valid-properties","title":"Valid properties","text":""},{"location":"maintenance/frontends.html#required_tags","title":"<code>required_tags</code>","text":"<p>Associates one or more frontends with one or more backends with the same tags. Matches the <code>{\"required_tags\":[\"bbb_26\"]}</code> specification in backend properties.</p>"},{"location":"maintenance/frontends.html#default_presentation","title":"<code>default_presentation</code>","text":"<pre><code>\"default_presentation\":{\"url\":\"https://static.example.com/presentation/my-frontend.pdf\",\"force\":false}\n</code></pre> <p>Specifies a default presentation for the tenant, which will be downloaded from <code>url</code>. Specify <code>\"force\":true</code> to ignore any custom presentation uploaded via the frontend application.</p>"},{"location":"maintenance/frontends.html#create_default_params","title":"<code>create_default_params</code>","text":"<p>Parameters (see documentation) to be set if the frontend application does not specify the parameter. For example, the following will set the default welcome message to \"Welcome to you meeting!\".</p> <pre><code>\"create_default_params\":{\"welcome\":\"Welcome to your meeting!\"}\n</code></pre>"},{"location":"maintenance/frontends.html#create_override_params","title":"<code>create_override_params</code>","text":"<p>Parameters (see documentation) that will override the respective parameter of the frontend application. For example, the following will ensure that the learning dashboard is disabled and recording is off:</p> <pre><code>\"create_override_params\":{\"disabledFeatures\":\"learningDashboard\",\"record\":\"false\"}\n</code></pre>"},{"location":"maintenance/frontends.html#using-a-frontend","title":"Using a frontend","text":"<p>To test the frontend, you can use <code>https://mconf.github.io/api-mate/</code>. Use <code>https://api.bbb.example.org/bbb/my-frontend/bigbluebutton/api</code> as the link and the secret. You can also use this URL for Greenlight or other frontends.</p>"},{"location":"maintenance/frontends.html#listing-frontends","title":"Listing frontends","text":"<pre><code>b3scalectl --api https://api.bbb.example.org show frontends\n\n37dada5b-9fd0-41b5-8875-17037a4d5413 my-frontend eefeng2aixaeghu0tae9ja4ietheeNgoo5ubunga1ohkeexaib3bai9xudaang2i {\"required_tags\":[\"bbb_26\"]}\n...\n</code></pre>"},{"location":"maintenance/frontends.html#modifying-a-frontend","title":"Modifying a frontend","text":"<p>You can use <code>set frontend</code> with <code>-j</code> (see \"Assigning tags to a frontend\") or <code>--secret</code> (see \"Adding a frontend\").</p>"},{"location":"maintenance/frontends.html#removing-a-frontend","title":"Removing a frontend","text":"<pre><code>b3scalectl --api https://api.bbb.example.org delete frontend my-frontend\n</code></pre>"}]}